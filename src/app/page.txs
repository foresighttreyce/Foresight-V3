cat > src/app/page.tsx << 'EOF'
'use client';

import React, { useState, useEffect } from 'react';

// Utility functions
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0,
  }).format(amount);
};

const formatBTC = (amount: number) => {
  return amount.toFixed(6) + ' BTC';
};

const formatPercentage = (value: number) => {
  return `${value >= 0 ? '+' : ''}${value.toFixed(2)}%`;
};

// Main component
export default function HomePage() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [portfolio, setPortfolio] = useState({
    cashUSD: 10000000,
    btcHoldingsHot: 0,
    btcHoldingsCold: 0,
    btcHoldings: 0,
    totalValue: 10000000,
    costBasis: 0,
    unrealizedPL: 0,
    trades: [] as any[]
  });
  const [marketData, setMarketData] = useState<any>(null);
  const [tradeForm, setTradeForm] = useState({
    asset: 'BTC',
    side: 'BUY',
    amount: 100000
  });
  const [tradePreview, setTradePreview] = useState<any>(null);
  const [showCustodyPrompt, setShowCustodyPrompt] = useState(false);
  const [pendingBtcTrade, setPendingBtcTrade] = useState<any>(null);
  const [reportFilters, setReportFilters] = useState({
    timePeriod: '1M',
    reportType: 'portfolio',
    exportFormat: 'PDF'
  });

  // Fetch Bitcoin price
  useEffect(() => {
    const fetchBitcoinPrice = async () => {
      try {
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd&include_24hr_change=true&include_market_cap=true&include_24hr_vol=true');
        const data = await response.json();
        setMarketData({
          usd: data.bitcoin.usd,
          usd_24h_change: data.bitcoin.usd_24h_change,
          usd_market_cap: data.bitcoin.usd_market_cap,
          usd_24h_vol: data.bitcoin.usd_24h_vol
        });
      } catch (error) {
        console.error('Error fetching Bitcoin price:', error);
        setMarketData({
          usd: 45000,
          usd_24h_change: 2.5,
          usd_market_cap: 850000000000,
          usd_24h_vol: 25000000000
        });
      }
    };

    fetchBitcoinPrice();
    const interval = setInterval(fetchBitcoinPrice, 30000);
    return () => clearInterval(interval);
  }, []);

  // Update portfolio calculations
  useEffect(() => {
    const btcHoldings = portfolio.btcHoldingsHot + portfolio.btcHoldingsCold;
    const btcValue = btcHoldings * (marketData?.usd || 45000);
    const totalValue = portfolio.cashUSD + btcValue;
    const unrealizedPL = btcValue - portfolio.costBasis;

    setPortfolio(prev => ({
      ...prev,
      btcHoldings,
      totalValue,
      unrealizedPL
    }));
  }, [portfolio.btcHoldingsHot, portfolio.btcHoldingsCold, portfolio.costBasis, marketData?.usd]);

  const handleTradePreview = () => {
    const price = tradeForm.asset === 'BTC' ? (marketData?.usd || 45000) : 150;
    const amount = tradeForm.asset === 'BTC' ? tradeForm.amount / price : tradeForm.amount;
    const fees = tradeForm.amount * 0.001;
    const totalUSD = tradeForm.amount + fees;

    setTradePreview({
      ...tradeForm,
      price,
      amount,
      fees,
      totalUSD
    });
  };

  const handleExecuteTrade = () => {
    if (!tradePreview) return;

    const newTrade = {
      id: Date.now(),
      ...tradePreview,
      timestamp: new Date().toISOString(),
      storage: 'hot'
    };

    if (tradeForm.side === 'BUY') {
      if (tradeForm.asset === 'BTC') {
        setPortfolio(prev => ({
          ...prev,
          cashUSD: prev.cashUSD - tradePreview.totalUSD,
          btcHoldingsHot: prev.btcHoldingsHot + tradePreview.amount,
          costBasis: prev.costBasis + tradePreview.amount * tradePreview.price
        }));
        setPendingBtcTrade(newTrade);
        setShowCustodyPrompt(true);
      } else {
        setPortfolio(prev => ({
          ...prev,
          cashUSD: prev.cashUSD - tradePreview.totalUSD
        }));
      }
    } else {
      if (tradeForm.asset === 'BTC') {
        setPortfolio(prev => ({
          ...prev,
          cashUSD: prev.cashUSD + tradePreview.totalUSD,
          btcHoldingsHot: prev.btcHoldingsHot - tradePreview.amount
        }));
      } else {
        setPortfolio(prev => ({
          ...prev,
          cashUSD: prev.cashUSD + tradePreview.totalUSD
        }));
      }
    }

    setPortfolio(prev => ({
      ...prev,
      trades: [...prev.trades, newTrade]
    }));

    setTradePreview(null);
    setTradeForm({ asset: 'BTC', side: 'BUY', amount: 100000 });
  };

  const handleCustodyDecision = (storage: 'hot' | 'cold') => {
    if (!pendingBtcTrade) return;

    if (storage === 'cold') {
      setPortfolio(prev => ({
        ...prev,
        btcHoldingsHot: prev.btcHoldingsHot - pendingBtcTrade.amount,
        btcHoldingsCold: prev.btcHoldingsCold + pendingBtcTrade.amount
      }));
    }

    setShowCustodyPrompt(false);
    setPendingBtcTrade(null);
  };

  const generateReport = () => {
    if (reportFilters.exportFormat === 'CSV') {
      const csvContent = 'data:text/csv;charset=utf-8,' + 
        'Date,Asset,Side,Amount,Total USD\n' +
        portfolio.trades.map(trade => 
          `${trade.timestamp},${trade.asset},${trade.side},${trade.amount},${trade.totalUSD}`
        ).join('\n');
      
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement('a');
      link.setAttribute('href', encodedUri);
      link.setAttribute('download', 'trade_history.csv');
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } else {
      alert(`${reportFilters.exportFormat} report generated successfully!`);
    }
  };

  const resetDemo = () => {
    setPortfolio({
      cashUSD: 10000000,
      btcHoldingsHot: 0,
      btcHoldingsCold: 0,
      btcHoldings: 0,
      totalValue: 10000000,
      costBasis: 0,
      unrealizedPL: 0,
      trades: []
    });
    setTradePreview(null);
    setShowCustodyPrompt(false);
    setPendingBtcTrade(null);
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0F1420 0%, #1a1d23 50%, #0F1420 100%)',
      backgroundSize: '400% 400%',
      animation: 'gradientShift 20s ease infinite',
      color: '#e2e8f0',
      fontFamily: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif'
    }}>
      {/* Header */}
      <header style={{
        background: 'rgba(15, 20, 32, 0.95)',
        backdropFilter: 'blur(20px)',
        borderBottom: '1px solid rgba(43, 50, 64, 0.3)',
        padding: '20px 40px',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          maxWidth: '1600px',
          margin: '0 auto'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
            <div style={{
              width: '40px',
              height: '40px',
              background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#ffffff'
            }}>
              FE
            </div>
            <h1 style={{ 
              fontSize: '24px', 
              fontWeight: '700', 
              color: '#e2e8f0',
              margin: 0
            }}>
              Foresight Enterprise™
            </h1>
          </div>

          <nav style={{ display: 'flex', gap: '8px' }}>
            {['dashboard', 'trade', 'custody', 'reporting'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                style={{
                  padding: '12px 20px',
                  borderRadius: '12px',
                  border: 'none',
                  background: activeTab === tab 
                    ? 'rgba(6, 182, 212, 0.2)' 
                    : 'transparent',
                  color: activeTab === tab ? '#06b6d4' : '#94a3b8',
                  fontSize: '14px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  transition: 'all 0.3s ease',
                  border: activeTab === tab ? '1px solid rgba(6, 182, 212, 0.3)' : '1px solid transparent'
                }}
              >
                {tab.charAt(0).toUpperCase() + tab.slice(1)}
              </button>
            ))}
          </nav>

          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            <button
              onClick={resetDemo}
              style={{
                padding: '8px 16px',
                borderRadius: '8px',
                border: '1px solid rgba(6, 182, 212, 0.3)',
                background: 'rgba(6, 182, 212, 0.1)',
                color: '#06b6d4',
                fontSize: '12px',
                fontWeight: '500',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
            >
              Reset Demo
            </button>
            <div style={{
              width: '40px',
              height: '40px',
              background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
              borderRadius: '50%',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '16px',
              fontWeight: 'bold',
              color: '#ffffff',
              cursor: 'pointer'
            }}>
              TC
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main style={{ 
        padding: '40px', 
        maxWidth: '1600px', 
        margin: '0 auto',
        minHeight: 'calc(100vh - 100px)'
      }}>
        {activeTab === 'dashboard' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h1 style={{ 
                fontSize: '42px', 
                fontWeight: '800', 
                color: '#e2e8f0', 
                marginBottom: '12px',
                textAlign: 'center'
              }}>
                Treasury Dashboard
              </h1>
              <p style={{ 
                color: '#94a3b8', 
                marginBottom: '40px', 
                fontSize: '20px',
                textAlign: 'center',
                maxWidth: '600px',
                margin: '0 auto 40px auto'
              }}>
                Real-time portfolio overview and institutional-grade Bitcoin treasury management
              </p>

              {marketData && (
                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '20px',
                  padding: '32px',
                  marginBottom: '40px',
                  border: '1px solid rgba(6, 182, 212, 0.15)'
                }}>
                  <div style={{ 
                    display: 'grid', 
                    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
                    gap: '32px',
                    alignItems: 'center'
                  }}>
                    <div style={{ textAlign: 'center' }}>
                      <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px' }}>
                        Bitcoin Price
                      </div>
                      <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#06b6d4' }}>
                        {formatCurrency(marketData.usd)}
                      </div>
                    </div>
                    <div style={{ textAlign: 'center' }}>
                      <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px' }}>
                        24h Change
                      </div>
                      <div style={{
                        fontSize: '24px',
                        fontWeight: 'bold',
                        color: marketData.usd_24h_change >= 0 ? '#10b981' : '#ef4444'
                      }}>
                        {formatPercentage(marketData.usd_24h_change)}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(320px, 1fr))', 
                gap: '32px' 
              }}>
                <div style={{
                  background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.15) 0%, rgba(8, 145, 178, 0.1) 100%)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(6, 182, 212, 0.2)'
                }}>
                  <h3 style={{ color: '#e2e8f0', fontSize: '20px', marginBottom: '24px' }}>
                    Total Portfolio Value
                  </h3>
                  <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#06b6d4' }}>
                    {formatCurrency(portfolio.totalValue)}
                  </div>
                </div>

                <div style={{
                  background: 'linear-gradient(135deg, rgba(251, 146, 60, 0.15) 0%, rgba(251, 113, 133, 0.1) 100%)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(251, 146, 60, 0.2)'
                }}>
                  <h3 style={{ color: '#e2e8f0', fontSize: '20px', marginBottom: '24px' }}>
                    Bitcoin Holdings
                  </h3>
                  <div style={{ fontSize: '36px', fontWeight: 'bold', color: '#f59e0b' }}>
                    {formatBTC(portfolio.btcHoldings)}
                  </div>
                  <div style={{ fontSize: '15px', color: '#94a3b8', marginTop: '12px' }}>
                    🔥 Hot: {formatBTC(portfolio.btcHoldingsHot)} | ❄️ Cold: {formatBTC(portfolio.btcHoldingsCold)}
                  </div>
                </div>

                <div style={{
                  background: 'linear-gradient(135deg, rgba(34, 197, 94, 0.15) 0%, rgba(16, 185, 129, 0.1) 100%)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(34, 197, 94, 0.2)'
                }}>
                  <h3 style={{ color: '#e2e8f0', fontSize: '20px', marginBottom: '24px' }}>
                    Unrealized P&L
                  </h3>
                  <div style={{
                    fontSize: '36px',
                    fontWeight: 'bold',
                    color: portfolio.unrealizedPL >= 0 ? '#10b981' : '#ef4444'
                  }}>
                    {formatCurrency(portfolio.unrealizedPL)}
                  </div>
                  <div style={{ fontSize: '15px', color: '#94a3b8', marginTop: '12px' }}>
                    Cost Basis: {formatCurrency(portfolio.costBasis)}
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'trade' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '40px', 
                fontSize: '32px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Execute Trade
              </h2>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', 
                gap: '40px' 
              }}>
                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(6, 182, 212, 0.15)'
                }}>
                  <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px' }}>
                    Asset Selection
                  </h3>
                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px'
                    }}>
                      Select Asset
                    </label>
                    <select 
                      value={tradeForm.asset} 
                      onChange={(e) => setTradeForm({...tradeForm, asset: e.target.value})}
                      style={{
                        width: '100%',
                        padding: '16px',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.3)',
                        background: 'rgba(6, 182, 212, 0.05)',
                        color: '#e2e8f0',
                        fontSize: '16px',
                        outline: 'none'
                      }}
                    >
                      <option value="BTC">Bitcoin (BTC)</option>
                      <option value="MSTR">MicroStrategy (MSTR)</option>
                      <option value="STRC">Strike (STRC)</option>
                      <option value="STRK">Strike (STRK)</option>
                      <option value="STRF">Strike (STRF)</option>
                      <option value="STRD">Strike (STRD)</option>
                    </select>
                  </div>

                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px'
                    }}>
                      Trade Type
                    </label>
                    <div style={{ display: 'flex', gap: '12px' }}>
                      <button
                        onClick={() => setTradeForm({...tradeForm, side: 'BUY'})}
                        style={{
                          flex: 1,
                          padding: '16px',
                          borderRadius: '12px',
                          border: 'none',
                          background: tradeForm.side === 'BUY' 
                            ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' 
                            : 'rgba(16, 185, 129, 0.1)',
                          color: tradeForm.side === 'BUY' ? '#ffffff' : '#10b981',
                          fontSize: '16px',
                          fontWeight: '600',
                          cursor: 'pointer'
                        }}
                      >
                        BUY
                      </button>
                      <button
                        onClick={() => setTradeForm({...tradeForm, side: 'SELL'})}
                        style={{
                          flex: 1,
                          padding: '16px',
                          borderRadius: '12px',
                          border: 'none',
                          background: tradeForm.side === 'SELL' 
                            ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)' 
                            : 'rgba(239, 68, 68, 0.1)',
                          color: tradeForm.side === 'SELL' ? '#ffffff' : '#ef4444',
                          fontSize: '16px',
                          fontWeight: '600',
                          cursor: 'pointer'
                        }}
                      >
                        SELL
                      </button>
                    </div>
                  </div>

                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px'
                    }}>
                      Amount ({tradeForm.asset === 'BTC' ? 'USD' : 'Shares'})
                    </label>
                    <input
                      type="number"
                      value={tradeForm.amount}
                      onChange={(e) => setTradeForm({...tradeForm, amount: parseFloat(e.target.value) || 0})}
                      placeholder={tradeForm.asset === 'BTC' ? '1000' : '100'}
                      style={{
                        width: '100%',
                        padding: '16px',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.3)',
                        background: 'rgba(6, 182, 212, 0.05)',
                        color: '#e2e8f0',
                        fontSize: '16px',
                        outline: 'none'
                      }}
                    />
                  </div>

                  <button
                    onClick={handleTradePreview}
                    style={{
                      width: '100%',
                      padding: '18px',
                      borderRadius: '12px',
                      border: 'none',
                      background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
                      color: '#ffffff',
                      fontSize: '18px',
                      fontWeight: '600',
                      cursor: 'pointer'
                    }}
                  >
                    Preview Trade
                  </button>
                </div>

                {tradePreview && (
                  <div style={{
                    background: 'rgba(6, 182, 212, 0.08)',
                    borderRadius: '24px',
                    padding: '40px',
                    border: '1px solid rgba(6, 182, 212, 0.15)'
                  }}>
                    <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px' }}>
                      Trade Preview
                    </h3>
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Asset:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>{tradePreview.asset}</span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Side:</span>
                        <span style={{ 
                          color: tradePreview.side === 'BUY' ? '#10b981' : '#ef4444',
                          fontWeight: '600'
                        }}>
                          {tradePreview.side}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Amount:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {tradePreview.asset === 'BTC' ? formatCurrency(tradePreview.amount) : tradePreview.amount.toFixed(2) + ' shares'}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Price:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(tradePreview.price)}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Fees:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(tradePreview.fees)}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '24px',
                        padding: '16px',
                        background: 'rgba(6, 182, 212, 0.1)',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.2)'
                      }}>
                        <span style={{ color: '#94a3b8', fontSize: '16px', fontWeight: '600' }}>Total:</span>
                        <span style={{ 
                          color: '#06b6d4', 
                          fontSize: '18px', 
                          fontWeight: '700'
                        }}>
                          {formatCurrency(tradePreview.totalUSD)}
                        </span>
                      </div>
                    </div>

                    <button
                      onClick={handleExecuteTrade}
                      style={{
                        width: '100%',
                        padding: '18px',
                        borderRadius: '12px',
                        border: 'none',
                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                        color: '#ffffff',
                        fontSize: '18px',
                        fontWeight: '600',
                        cursor: 'pointer'
                      }}
                    >
                      Execute Trade
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'custody' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '40px', 
                fontSize: '32px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Custody Management
              </h2>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', 
                gap: '40px' 
              }}>
                <div style={{
                  background: 'rgba(251, 146, 60, 0.08)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(251, 146, 60, 0.15)'
                }}>
                  <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px' }}>
                    🔥 Hot Wallet
                  </h3>
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#f59e0b' }}>
                      {formatBTC(portfolio.btcHoldingsHot)}
                    </div>
                    <div style={{ fontSize: '16px', color: '#94a3b8' }}>
                      Available for immediate trading
                    </div>
                  </div>
                </div>

                <div style={{
                  background: 'rgba(34, 197, 94, 0.08)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(34, 197, 94, 0.15)'
                }}>
                  <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px' }}>
                    ❄️ Cold Storage
                  </h3>
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#10b981' }}>
                      {formatBTC(portfolio.btcHoldingsCold)}
                    </div>
                    <div style={{ fontSize: '16px', color: '#94a3b8' }}>
                      Multi-signature protected
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'reporting' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '40px', 
                fontSize: '32px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Reporting & Analytics
              </h2>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', 
                gap: '32px',
                marginBottom: '40px'
              }}>
                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '20px',
                  padding: '24px',
                  border: '1px solid rgba(6, 182, 212, 0.15)'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px' }}>
                    Time Period
                  </div>
                  <select 
                    value={reportFilters.timePeriod} 
                    onChange={(e) => setReportFilters({...reportFilters, timePeriod: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '10px',
                      border: '1px solid rgba(6, 182, 212, 0.3)',
                      background: 'rgba(6, 182, 212, 0.05)',
                      color: '#e2e8f0',
                      fontSize: '14px',
                      outline: 'none'
                    }}
                  >
                    <option value="1M">Last Month</option>
                    <option value="3M">Last 3 Months</option>
                    <option value="6M">Last 6 Months</option>
                    <option value="1Y">Last Year</option>
                    <option value="ALL">All Time</option>
                  </select>
                </div>

                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '20px',
                  padding: '24px',
                  border: '1px solid rgba(6, 182, 212, 0.15)'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px' }}>
                    Report Type
                  </div>
                  <select 
                    value={reportFilters.reportType} 
                    onChange={(e) => setReportFilters({...reportFilters, reportType: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '10px',
                      border: '1px solid rgba(6, 182, 212, 0.3)',
                      background: 'rgba(6, 182, 212, 0.05)',
                      color: '#e2e8f0',
                      fontSize: '14px',
                      outline: 'none'
                    }}
                  >
                    <option value="portfolio">Portfolio Summary</option>
                    <option value="trades">Trade History</option>
                    <option value="performance">Performance Analysis</option>
                    <option value="compliance">Compliance Report</option>
                  </select>
                </div>

                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '20px',
                  padding: '24px',
                  border: '1px solid rgba(6, 182, 212, 0.15)'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px' }}>
                    Export Format
                  </div>
                  <select 
                    value={reportFilters.exportFormat} 
                    onChange={(e) => setReportFilters({...reportFilters, exportFormat: e.target.value})}
                    style={{
                      width: '100%',
                      padding: '12px',
                      borderRadius: '10px',
                      border: '1px solid rgba(6, 182, 212, 0.3)',
                      background: 'rgba(6, 182, 212, 0.05)',
                      color: '#e2e8f0',
                      fontSize: '14px',
                      outline: 'none'
                    }}
                  >
                    <option value="PDF">PDF</option>
                    <option value="CSV">CSV</option>
                    <option value="XLSX">Excel</option>
                    <option value="JSON">JSON</option>
                  </select>
                </div>
              </div>

              <div style={{ textAlign: 'center', marginTop: '40px' }}>
                <button
                  onClick={generateReport}
                  style={{
                    padding: '20px 40px',
                    borderRadius: '16px',
                    border: 'none',
                    background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
                    color: '#ffffff',
                    fontSize: '18px',
                    fontWeight: '600',
                    cursor: 'pointer'
                  }}
                >
                  Generate Report
                </button>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* BTC Custody Prompt Modal */}
      {showCustodyPrompt && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.8)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000,
          backdropFilter: 'blur(10px)'
        }}>
          <div style={{
            background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.95) 0%, rgba(8, 145, 178, 0.95) 100%)',
            borderRadius: '28px',
            padding: '60px',
            maxWidth: '500px',
            width: '90%',
            textAlign: 'center',
            border: '1px solid rgba(6, 182, 212, 0.3)',
            boxShadow: '0 25px 50px rgba(0, 0, 0, 0.5)'
          }}>
            <h3 style={{ 
              color: '#ffffff', 
              marginBottom: '24px', 
              fontSize: '24px', 
              fontWeight: '700' 
            }}>
              BTC Custody Decision
            </h3>
            <p style={{ 
              color: '#e2e8f0', 
              marginBottom: '40px', 
              fontSize: '16px',
              lineHeight: '1.6'
            }}>
              Your BTC purchase has been executed successfully! Where would you like to store your Bitcoin?
            </p>
            <div style={{ display: 'flex', gap: '20px', justifyContent: 'center' }}>
              <button
                onClick={() => handleCustodyDecision('hot')}
                style={{
                  padding: '16px 32px',
                  borderRadius: '16px',
                  border: 'none',
                  background: 'rgba(255, 255, 255, 0.2)',
                  color: '#ffffff',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  border: '1px solid rgba(255, 255, 255, 0.3)'
                }}
              >
                🔥 Hot Wallet
              </button>
              <button
                onClick={() => handleCustodyDecision('cold')}
                style={{
                  padding: '16px 32px',
                  borderRadius: '16px',
                  border: 'none',
                  background: 'rgba(255, 255, 255, 0.2)',
                  color: '#ffffff',
                  fontSize: '16px',
                  fontWeight: '600',
                  cursor: 'pointer',
                  border: '1px solid rgba(255, 255, 255, 0.3)'
                }}
              >
                ❄️ Cold Storage
              </button>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes gradientShift {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
      `}</style>
    </div>
  );
}
EOF
