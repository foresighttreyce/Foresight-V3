'use client'

import React, { useState, useEffect } from 'react'

interface Portfolio {
  cashUSD: number
  btcHoldingsHot: number
  btcHoldingsCold: number
  totalValue: number
  unrealizedPL: number
  trades: any[]
}

interface TradeForm {
  asset: string
  side: 'BUY' | 'SELL'
  amount: number
}

interface TradePreview {
  asset: string
  side: 'BUY' | 'SELL'
  amount: number
  price: number
  fees: number
  totalUSD: number
}

export default function Home() {
  const [activeTab, setActiveTab] = useState('dashboard')
  const [portfolio, setPortfolio] = useState<Portfolio>({
    cashUSD: 10000000,
    btcHoldingsHot: 0,
    btcHoldingsCold: 0,
    totalValue: 10000000,
    unrealizedPL: 0,
    trades: []
  })
  const [btcPrice, setBtcPrice] = useState(45000)
  const [tradeForm, setTradeForm] = useState<TradeForm>({
    asset: 'BTC',
    side: 'BUY',
    amount: 0
  })
  const [tradePreview, setTradePreview] = useState<TradePreview | null>(null)
  const [showCustodyPrompt, setShowCustodyPrompt] = useState(false)
  const [showMultisigModal, setShowMultisigModal] = useState(false)
  const [pendingBtcTrade, setPendingBtcTrade] = useState<any>(null)
  const [multisigStep, setMultisigStep] = useState(1)
  const [reportFilters, setReportFilters] = useState({
    timePeriod: '1M',
    reportType: 'portfolio',
    exportFormat: 'PDF'
  })

  useEffect(() => {
    // Simulate BTC price updates
    const interval = setInterval(() => {
      setBtcPrice(prev => prev + (Math.random() - 0.5) * 1000)
    }, 5000)
    return () => clearInterval(interval)
  }, [])

  useEffect(() => {
    // Load portfolio from localStorage
    const saved = localStorage.getItem('foresight-portfolio')
    if (saved) {
      setPortfolio(JSON.parse(saved))
    }
  }, [])

  useEffect(() => {
    // Save portfolio to localStorage
    localStorage.setItem('foresight-portfolio', JSON.stringify(portfolio))
  }, [portfolio])

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount)
  }

  const formatBTC = (amount: number) => {
    return `${amount.toFixed(8)} BTC`
  }

  const handleTradePreview = () => {
    if (tradeForm.amount <= 0) return

    const price = tradeForm.asset === 'BTC' ? btcPrice : 150 // Mock stock price
    const fees = tradeForm.asset === 'BTC' ? tradeForm.amount * 0.001 : tradeForm.amount * 0.01
    const totalUSD = tradeForm.amount + fees

    setTradePreview({
      asset: tradeForm.asset,
      side: tradeForm.side,
      amount: tradeForm.amount,
      price,
      fees,
      totalUSD
    })
  }

  const handleExecuteTrade = () => {
    if (!tradePreview) return

    if (tradeForm.side === 'BUY') {
      if (portfolio.cashUSD < tradePreview.totalUSD) {
        alert('Insufficient funds')
        return
      }

      const newPortfolio = { ...portfolio }
      newPortfolio.cashUSD -= tradePreview.totalUSD
      
      if (tradeForm.asset === 'BTC') {
        const btcAmount = tradePreview.amount / btcPrice
        newPortfolio.btcHoldingsHot += btcAmount
        newPortfolio.totalValue = newPortfolio.cashUSD + (newPortfolio.btcHoldingsHot + newPortfolio.btcHoldingsCold) * btcPrice
        setShowCustodyPrompt(true)
      }

      newPortfolio.trades.push({
        id: Date.now(),
        asset: tradeForm.asset,
        side: tradeForm.side,
        amount: tradeForm.amount,
        price: tradePreview.price,
        fees: tradePreview.fees,
        timestamp: new Date().toISOString()
      })

      setPortfolio(newPortfolio)
    } else {
      // SELL logic
      if (tradeForm.asset === 'BTC' && portfolio.btcHoldingsHot < tradeForm.amount / btcPrice) {
        alert('Insufficient BTC in hot wallet')
        return
      }

      const newPortfolio = { ...portfolio }
      newPortfolio.cashUSD += tradePreview.amount - tradePreview.fees
      
      if (tradeForm.asset === 'BTC') {
        const btcAmount = tradeForm.amount / btcPrice
        newPortfolio.btcHoldingsHot -= btcAmount
        newPortfolio.totalValue = newPortfolio.cashUSD + (newPortfolio.btcHoldingsHot + newPortfolio.btcHoldingsCold) * btcPrice
      }

      newPortfolio.trades.push({
        id: Date.now(),
        asset: tradeForm.asset,
        side: tradeForm.side,
        amount: tradeForm.amount,
        price: tradePreview.price,
        fees: tradePreview.fees,
        timestamp: new Date().toISOString()
      })

      setPortfolio(newPortfolio)
    }

    setTradePreview(null)
    setTradeForm({ asset: 'BTC', side: 'BUY', amount: 0 })
  }

  const handleCustodyDecision = (decision: 'hot' | 'cold') => {
    if (decision === 'cold') {
      const newPortfolio = { ...portfolio }
      const btcAmount = portfolio.btcHoldingsHot
      newPortfolio.btcHoldingsHot = 0
      newPortfolio.btcHoldingsCold = btcAmount
      setPortfolio(newPortfolio)
    }
    setShowCustodyPrompt(false)
  }

  const handleColdToHot = () => {
    if (portfolio.btcHoldingsCold > 0) {
      setPendingBtcTrade({ amount: portfolio.btcHoldingsCold })
      setShowMultisigModal(true)
    }
  }

  const processMultisigSignature = () => {
    if (multisigStep < 3) {
      setMultisigStep(multisigStep + 1)
    } else {
      // Complete transfer
      const newPortfolio = { ...portfolio }
      newPortfolio.btcHoldingsHot = portfolio.btcHoldingsCold
      newPortfolio.btcHoldingsCold = 0
      setPortfolio(newPortfolio)
      setShowMultisigModal(false)
      setMultisigStep(1)
    }
  }

  const generateReport = () => {
    const reportData = {
      portfolio,
      filters: reportFilters,
      generatedAt: new Date().toISOString()
    }
    
    const blob = new Blob([JSON.stringify(reportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `foresight-report-${Date.now()}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  const resetDemo = () => {
    const newPortfolio = {
      cashUSD: 10000000,
      btcHoldingsHot: 0,
      btcHoldingsCold: 0,
      totalValue: 10000000,
      unrealizedPL: 0,
      trades: []
    }
    setPortfolio(newPortfolio)
    localStorage.setItem('foresight-portfolio', JSON.stringify(newPortfolio))
  }

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%)',
      color: '#e2e8f0',
      fontFamily: 'Inter, -apple-system, BlinkMacSystemFont, sans-serif'
    }}>
      {/* Header */}
      <header style={{
        background: 'rgba(15, 23, 42, 0.8)',
        backdropFilter: 'blur(20px)',
        borderBottom: '1px solid rgba(148, 163, 184, 0.1)',
        padding: '20px 40px',
        position: 'sticky',
        top: 0,
        zIndex: 100
      }}>
        <div style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          maxWidth: '1400px',
          margin: '0 auto'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
            <div style={{
              fontSize: '28px',
              fontWeight: '700',
              background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text'
            }}>
              Foresight Enterpriseâ„¢
            </div>
            <div style={{
              padding: '4px 12px',
              background: 'rgba(6, 182, 212, 0.1)',
              borderRadius: '12px',
              fontSize: '12px',
              color: '#06b6d4',
              border: '1px solid rgba(6, 182, 212, 0.2)'
            }}>
              DEMO
            </div>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>
            <div style={{
              padding: '8px 16px',
              background: 'rgba(6, 182, 212, 0.1)',
              borderRadius: '12px',
              fontSize: '14px',
              color: '#06b6d4',
              border: '1px solid rgba(6, 182, 212, 0.2)'
            }}>
              BTC: ${btcPrice.toLocaleString()}
            </div>
            
            <div style={{
              width: '40px',
              height: '40px',
              borderRadius: '50%',
              background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              cursor: 'pointer',
              fontSize: '16px',
              fontWeight: '600',
              color: '#ffffff'
            }}
            onClick={() => setActiveTab('company')}>
              TC
            </div>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav style={{
        background: 'rgba(15, 23, 42, 0.6)',
        backdropFilter: 'blur(20px)',
        borderBottom: '1px solid rgba(148, 163, 184, 0.1)',
        padding: '0 40px'
      }}>
        <div style={{
          display: 'flex',
          gap: '0',
          maxWidth: '1400px',
          margin: '0 auto'
        }}>
          {['dashboard', 'trade', 'custody', 'reporting'].map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              style={{
                padding: '20px 32px',
                background: activeTab === tab ? 'rgba(6, 182, 212, 0.15)' : 'transparent',
                color: activeTab === tab ? '#06b6d4' : '#94a3b8',
                border: 'none',
                borderBottom: activeTab === tab ? '2px solid #06b6d4' : '2px solid transparent',
                fontSize: '16px',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                textTransform: 'capitalize'
              }}
              onMouseEnter={(e) => {
                if (activeTab !== tab) {
                  e.currentTarget.style.background = 'rgba(6, 182, 212, 0.05)'
                  e.currentTarget.style.color = '#cbd5e1'
                }
              }}
              onMouseLeave={(e) => {
                if (activeTab !== tab) {
                  e.currentTarget.style.background = 'transparent'
                  e.currentTarget.style.color = '#94a3b8'
                }
              }}
            >
              {tab}
            </button>
          ))}
        </div>
      </nav>

      {/* Main Content */}
      <main style={{
        maxWidth: '1400px',
        margin: '0 auto',
        padding: '40px',
        minHeight: 'calc(100vh - 200px)'
      }}>
        {activeTab === 'dashboard' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px',
            animation: 'slideUp 0.6s ease-out'
          }}>
            {/* Hero Section with Video Background */}
            <div style={{
              position: 'relative',
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '80px 60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)',
              overflow: 'hidden'
            }}>
              {/* Video Background */}
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'linear-gradient(45deg, rgba(6, 182, 212, 0.05) 25%, transparent 25%), linear-gradient(-45deg, rgba(6, 182, 212, 0.05) 25%, transparent 25%), linear-gradient(45deg, transparent 75%, rgba(6, 182, 212, 0.05) 75%), linear-gradient(-45deg, transparent 75%, rgba(6, 182, 212, 0.05) 75%)',
                backgroundSize: '20px 20px',
                backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',
                animation: 'move 20s linear infinite',
                opacity: 0.3
              }} />
              
              <div style={{ position: 'relative', zIndex: 1 }}>
                <h1 style={{ 
                  color: '#ffffff', 
                  marginBottom: '24px', 
                  fontSize: '48px', 
                  fontWeight: '800',
                  textAlign: 'center',
                  textShadow: '0 0 30px rgba(6, 182, 212, 0.5)'
                }}>
                  Bitcoin Treasury Management
                </h1>
                <p style={{ 
                  color: '#cbd5e1', 
                  marginBottom: '40px', 
                  fontSize: '20px',
                  textAlign: 'center',
                  maxWidth: '600px',
                  margin: '0 auto 40px auto'
                }}>
                  Enterprise-grade Bitcoin custody, trading, and reporting platform
                </p>
                
                <div style={{ 
                  display: 'flex', 
                  gap: '20px', 
                  justifyContent: 'center',
                  flexWrap: 'wrap'
                }}>
                  <button
                    onClick={() => setActiveTab('trade')}
                    style={{
                      padding: '16px 32px',
                      borderRadius: '16px',
                      border: 'none',
                      background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
                      color: '#ffffff',
                      fontSize: '18px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      boxShadow: '0 8px 25px rgba(6, 182, 212, 0.3)'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)'
                      e.currentTarget.style.boxShadow = '0 12px 35px rgba(6, 182, 212, 0.4)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)'
                      e.currentTarget.style.boxShadow = '0 8px 25px rgba(6, 182, 212, 0.3)'
                    }}
                  >
                    Execute Trade
                  </button>
                  <button
                    onClick={() => setActiveTab('reporting')}
                    style={{
                      padding: '16px 32px',
                      borderRadius: '16px',
                      border: 'none',
                      background: 'rgba(255, 255, 255, 0.1)',
                      color: '#ffffff',
                      fontSize: '18px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      border: '1px solid rgba(255, 255, 255, 0.2)'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)'
                      e.currentTarget.style.transform = 'translateY(-2px)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)'
                      e.currentTarget.style.transform = 'translateY(0)'
                    }}
                  >
                    Generate Report
                  </button>
                </div>
              </div>
            </div>

            {/* Portfolio Overview */}
            <div style={{
              background: 'rgba(6, 182, 212, 0.08)',
              borderRadius: '24px',
              padding: '40px',
              border: '1px solid rgba(6, 182, 212, 0.15)',
              backdropFilter: 'blur(10px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '32px', 
                fontSize: '28px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Portfolio Overview
              </h2>
              
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
                gap: '24px',
                marginBottom: '32px'
              }}>
                <div style={{
                  padding: '24px',
                  background: 'rgba(6, 182, 212, 0.1)',
                  borderRadius: '20px',
                  border: '1px solid rgba(6, 182, 212, 0.2)',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px', fontWeight: '500' }}>
                    Cash Balance
                  </div>
                  <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#06b6d4' }}>
                    {formatCurrency(portfolio.cashUSD)}
                  </div>
                </div>
                
                <div style={{
                  padding: '24px',
                  background: 'rgba(251, 146, 60, 0.1)',
                  borderRadius: '20px',
                  border: '1px solid rgba(251, 146, 60, 0.2)',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px', fontWeight: '500' }}>
                    Hot Wallet BTC
                  </div>
                  <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#f59e0b' }}>
                    {formatBTC(portfolio.btcHoldingsHot)}
                  </div>
                  <div style={{ fontSize: '16px', color: '#94a3b8' }}>
                    {formatCurrency(portfolio.btcHoldingsHot * btcPrice)}
                  </div>
                </div>
                
                <div style={{
                  padding: '24px',
                  background: 'rgba(34, 197, 94, 0.1)',
                  borderRadius: '20px',
                  border: '1px solid rgba(34, 197, 94, 0.2)',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px', fontWeight: '500' }}>
                    Cold Storage BTC
                  </div>
                  <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#10b981' }}>
                    {formatBTC(portfolio.btcHoldingsCold)}
                  </div>
                  <div style={{ fontSize: '16px', color: '#94a3b8' }}>
                    {formatCurrency(portfolio.btcHoldingsCold * btcPrice)}
                  </div>
                </div>
                
                <div style={{
                  padding: '24px',
                  background: 'rgba(6, 182, 212, 0.1)',
                  borderRadius: '20px',
                  border: '1px solid rgba(6, 182, 212, 0.2)',
                  textAlign: 'center'
                }}>
                  <div style={{ fontSize: '14px', color: '#64748b', marginBottom: '8px', fontWeight: '500' }}>
                    Total Portfolio Value
                  </div>
                  <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#06b6d4' }}>
                    {formatCurrency(portfolio.totalValue)}
                  </div>
                </div>
              </div>

              <div style={{ textAlign: 'center' }}>
                <button
                  onClick={handleColdToHot}
                  disabled={portfolio.btcHoldingsCold === 0}
                  style={{
                    padding: '16px 32px',
                    borderRadius: '16px',
                    border: 'none',
                    background: portfolio.btcHoldingsCold > 0 
                      ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' 
                      : 'rgba(148, 163, 184, 0.3)',
                    color: '#ffffff',
                    fontSize: '16px',
                    fontWeight: '600',
                    cursor: portfolio.btcHoldingsCold > 0 ? 'pointer' : 'not-allowed',
                    transition: 'all 0.3s ease',
                    opacity: portfolio.btcHoldingsCold > 0 ? 1 : 0.5
                  }}
                >
                  Transfer Cold Storage to Hot Wallet
                </button>
              </div>
            </div>

            {/* Recent Trades */}
            {portfolio.trades.length > 0 && (
              <div style={{
                background: 'rgba(6, 182, 212, 0.08)',
                borderRadius: '24px',
                padding: '40px',
                border: '1px solid rgba(6, 182, 212, 0.15)',
                backdropFilter: 'blur(10px)'
              }}>
                <h3 style={{ 
                  color: '#e2e8f0', 
                  marginBottom: '24px', 
                  fontSize: '24px', 
                  fontWeight: '600' 
                }}>
                  Recent Trades
                </h3>
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
                  gap: '20px' 
                }}>
                  {portfolio.trades.slice(-6).reverse().map((trade, index) => (
                    <div key={trade.id} style={{
                      padding: '20px',
                      background: 'rgba(6, 182, 212, 0.1)',
                      borderRadius: '16px',
                      border: '1px solid rgba(6, 182, 212, 0.2)'
                    }}>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        alignItems: 'center',
                        marginBottom: '12px'
                      }}>
                        <span style={{ 
                          fontSize: '16px', 
                          fontWeight: '600', 
                          color: '#e2e8f0' 
                        }}>
                          {trade.asset}
                        </span>
                        <span style={{ 
                          padding: '4px 12px',
                          borderRadius: '8px',
                          fontSize: '12px',
                          fontWeight: '600',
                          background: trade.side === 'BUY' 
                            ? 'rgba(16, 185, 129, 0.2)' 
                            : 'rgba(239, 68, 68, 0.2)',
                          color: trade.side === 'BUY' ? '#10b981' : '#ef4444'
                        }}>
                          {trade.side}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '8px' 
                      }}>
                        <span style={{ color: '#94a3b8' }}>Amount:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {trade.asset === 'BTC' ? formatCurrency(trade.amount) : trade.amount}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '8px' 
                      }}>
                        <span style={{ color: '#94a3b8' }}>Price:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(trade.price)}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between' 
                      }}>
                        <span style={{ color: '#94a3b8' }}>Fees:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(trade.fees)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'trade' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px',
            animation: 'slideUp 0.6s ease-out'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '40px', 
                fontSize: '32px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Execute Trade
              </h2>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', 
                gap: '40px' 
              }}>
                <div style={{
                  background: 'rgba(6, 182, 212, 0.08)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(6, 182, 212, 0.15)',
                  backdropFilter: 'blur(10px)'
                }}>
                  <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px', fontWeight: '600' }}>
                    Asset Selection
                  </h3>
                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px',
                      fontWeight: '500'
                    }}>
                      Select Asset
                    </label>
                    <select 
                      value={tradeForm.asset} 
                      onChange={(e) => setTradeForm({...tradeForm, asset: e.target.value})}
                      style={{
                        width: '100%',
                        padding: '16px',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.3)',
                        background: 'rgba(6, 182, 212, 0.05)',
                        color: '#e2e8f0',
                        fontSize: '16px',
                        outline: 'none',
                        transition: 'all 0.3s ease'
                      }}
                    >
                      <option value="BTC">Bitcoin (BTC)</option>
                      <option value="MSTR">MicroStrategy (MSTR)</option>
                      <option value="STRC">Strike (STRC)</option>
                      <option value="STRK">Strike (STRK)</option>
                      <option value="STRF">Strike (STRF)</option>
                      <option value="STRD">Strike (STRD)</option>
                    </select>
                  </div>

                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px',
                      fontWeight: '500'
                    }}>
                      Trade Type
                    </label>
                    <div style={{ display: 'flex', gap: '12px' }}>
                      <button
                        onClick={() => setTradeForm({...tradeForm, side: 'BUY'})}
                        style={{
                          flex: 1,
                          padding: '16px',
                          borderRadius: '12px',
                          border: 'none',
                          background: tradeForm.side === 'BUY' 
                            ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' 
                            : 'rgba(16, 185, 129, 0.1)',
                          color: tradeForm.side === 'BUY' ? '#ffffff' : '#10b981',
                          fontSize: '16px',
                          fontWeight: '600',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          boxShadow: tradeForm.side === 'BUY' ? '0 8px 25px rgba(16, 185, 129, 0.3)' : 'none'
                        }}
                      >
                        BUY
                      </button>
                      <button
                        onClick={() => setTradeForm({...tradeForm, side: 'SELL'})}
                        style={{
                          flex: 1,
                          padding: '16px',
                          borderRadius: '12px',
                          border: 'none',
                          background: tradeForm.side === 'SELL' 
                            ? 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)' 
                            : 'rgba(239, 68, 68, 0.1)',
                          color: tradeForm.side === 'SELL' ? '#ffffff' : '#ef4444',
                          fontSize: '16px',
                          fontWeight: '600',
                          cursor: 'pointer',
                          transition: 'all 0.3s ease',
                          boxShadow: tradeForm.side === 'SELL' ? '0 8px 25px rgba(239, 68, 68, 0.3)' : 'none'
                        }}
                      >
                        SELL
                      </button>
                    </div>
                  </div>

                  <div style={{ marginBottom: '24px' }}>
                    <label style={{ 
                      display: 'block', 
                      color: '#94a3b8', 
                      marginBottom: '8px', 
                      fontSize: '14px',
                      fontWeight: '500'
                    }}>
                      Amount ({tradeForm.asset === 'BTC' ? 'USD' : 'Shares'})
                    </label>
                    <input
                      type="number"
                      value={tradeForm.amount}
                      onChange={(e) => setTradeForm({...tradeForm, amount: parseFloat(e.target.value) || 0})}
                      placeholder={tradeForm.asset === 'BTC' ? '1000' : '100'}
                      style={{
                        width: '100%',
                        padding: '16px',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.3)',
                        background: 'rgba(6, 182, 212, 0.05)',
                        color: '#e2e8f0',
                        fontSize: '16px',
                        outline: 'none',
                        transition: 'all 0.3s ease'
                      }}
                    />
                  </div>

                  <button
                    onClick={handleTradePreview}
                    style={{
                      width: '100%',
                      padding: '18px',
                      borderRadius: '12px',
                      border: 'none',
                      background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
                      color: '#ffffff',
                      fontSize: '18px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease',
                      boxShadow: '0 8px 25px rgba(6, 182, 212, 0.3)'
                    }}
                    onMouseEnter={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)'
                      e.currentTarget.style.boxShadow = '0 12px 35px rgba(6, 182, 212, 0.4)'
                    }}
                    onMouseLeave={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)'
                      e.currentTarget.style.boxShadow = '0 8px 25px rgba(6, 182, 212, 0.3)'
                    }}
                  >
                    Preview Trade
                  </button>
                </div>

                {tradePreview && (
                  <div style={{
                    background: 'rgba(6, 182, 212, 0.08)',
                    borderRadius: '24px',
                    padding: '40px',
                    border: '1px solid rgba(6, 182, 212, 0.15)',
                    backdropFilter: 'blur(10px)',
                    animation: 'slideIn 0.5s ease-out'
                  }}>
                    <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px', fontWeight: '600' }}>
                      Trade Preview
                    </h3>
                    <div style={{ marginBottom: '24px' }}>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Asset:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>{tradePreview.asset}</span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Side:</span>
                        <span style={{ 
                          color: tradePreview.side === 'BUY' ? '#10b981' : '#ef4444',
                          fontWeight: '600'
                        }}>
                          {tradePreview.side}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Amount:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {tradePreview.asset === 'BTC' ? formatCurrency(tradePreview.amount) : tradePreview.amount.toFixed(2) + ' shares'}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a8f0' }}>Price:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(tradePreview.price)}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '12px',
                        padding: '12px 0',
                        borderBottom: '1px solid rgba(6, 182, 212, 0.1)'
                      }}>
                        <span style={{ color: '#94a3b8' }}>Fees:</span>
                        <span style={{ color: '#e2e8f0', fontWeight: '600' }}>
                          {formatCurrency(tradePreview.fees)}
                        </span>
                      </div>
                      <div style={{ 
                        display: 'flex', 
                        justifyContent: 'space-between', 
                        marginBottom: '24px',
                        padding: '16px',
                        background: 'rgba(6, 182, 212, 0.1)',
                        borderRadius: '12px',
                        border: '1px solid rgba(6, 182, 212, 0.2)'
                      }}>
                        <span style={{ color: '#94a3b8', fontSize: '16px', fontWeight: '600' }}>Total:</span>
                        <span style={{ 
                          color: '#06b6d4', 
                          fontSize: '18px', 
                          fontWeight: '700',
                          textShadow: '0 0 20px rgba(6, 182, 212, 0.3)'
                        }}>
                          {formatCurrency(tradePreview.totalUSD)}
                        </span>
                      </div>
                    </div>

                    <button
                      onClick={handleExecuteTrade}
                      style={{
                        width: '100%',
                        padding: '18px',
                        borderRadius: '12px',
                        border: 'none',
                        background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                        color: '#ffffff',
                        fontSize: '18px',
                        fontWeight: '600',
                        cursor: 'pointer',
                        transition: 'all 0.3s ease',
                        boxShadow: '0 8px 25px rgba(16, 185, 129, 0.3)'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.transform = 'translateY(-2px)'
                        e.currentTarget.style.boxShadow = '0 12px 35px rgba(16, 185, 129, 0.4)'
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.transform = 'translateY(0)'
                        e.currentTarget.style.boxShadow = '0 8px 25px rgba(16, 185, 129, 0.3)'
                      }}
                    >
                      Execute Trade
                    </button>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'custody' && (
          <div style={{ 
            display: 'flex', 
            flexDirection: 'column', 
            gap: '40px',
            animation: 'slideUp 0.6s ease-out'
          }}>
            <div style={{
              background: 'linear-gradient(135deg, rgba(6, 182, 212, 0.1) 0%, rgba(8, 145, 178, 0.05) 100%)',
              borderRadius: '28px',
              padding: '60px',
              border: '1px solid rgba(6, 182, 212, 0.2)',
              boxShadow: '0 25px 50px rgba(0, 0, 0, 0.3)',
              backdropFilter: 'blur(20px)'
            }}>
              <h2 style={{ 
                color: '#e2e8f0', 
                marginBottom: '40px', 
                fontSize: '32px', 
                fontWeight: '700',
                textAlign: 'center'
              }}>
                Custody Management
              </h2>

              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', 
                gap: '40px' 
              }}>
                <div style={{
                  background: 'rgba(251, 146, 60, 0.08)',
                  borderRadius: '24px',
                  padding: '40px',
                  border: '1px solid rgba(251, 146, 60, 0.15)',
                  backdropFilter: 'blur(10px)'
                }}>
                  <h3 style={{ color: '#e2e8f0', marginBottom: '24px', fontSize: '20px', fontWeight: '600' }}>
                    Hot Wallet
                  </h3>
                  <div style={{ marginBottom: '24px' }}>
                    <div style={{ fontSize: '32px', fontWeight: 'bold', color: '#f59e0b', marginBottom: '8px' }}>
                      {formatBTC(portfolio.btcHoldingsHot)}
                    </div>
                    <div style={{ fontSize: '16px', color: '#94a3b8' }}>
                      Available for immediate trading
                    </div>
                  </div>
                  <div style={{ 
                    padding: '16px', 
                    background: 'rgba(251, 146, 60, 0.1)', 
                    borderRadius: '12px',
                    border: '1px solid rgba(251, 146, 60, 0.2)'
                  }}>
                    <div style={{ fontSize: '14px', color: '#94a3b8', marginBottom: '8px' }}>
                      Security Level: Hot Storage
                    </div>
                    <div style={{ fontSize: '14px', color: '#94a3b8' }}>
                      Insurance: $10M coverage
                    </div>
                  </div>
                </div>

                <div style={{
                  background: 'rgba(34, 197, 94, 0.08)',
                  borderRadius: '24px
